<INT> : int
<ID> : computeFact
<RIGHT_ROUND_B> : (
<INT> : int
<ID> : num
<LEFT_ROUND_B> : )
<RIGHT_CURLY_B> : {
<INT> : int
<ID> : factorial
<SEMICOLON> : ;
<ID> : factorial
<ASSIGN_OPERATOR> : =
<INTEGERAL_LITERAL> : 1
<SEMICOLON> : ;
<IF> : if
<RIGHT_ROUND_B> : (
<ID> : num
<LESSTHAN> : <
<INTEGERAL_LITERAL> : 0
<LEFT_ROUND_B> : )
<RIGHT_CURLY_B> : {
<RETURN> : return
<ID> : factorial
<SEMICOLON> : ;
<LEFT_CURLY_B> : }
<ELSE> : else
<RIGHT_CURLY_B> : {
<INT> : int
<ID> : i
<SEMICOLON> : ;
<ID> : i
<ASSIGN_OPERATOR> : =
<INTEGERAL_LITERAL> : 1
<SEMICOLON> : ;
<WHILE> : while
<RIGHT_ROUND_B> : (
<ID> : i
<LESS_EQ> : <=
<ID> : num
<LEFT_ROUND_B> : )
<RIGHT_CURLY_B> : {
<ID> : factorial
<ASSIGN_OPERATOR> : =
<ID> : factorial
<ASTERICK> : *
<ID> : i
<SEMICOLON> : ;
<ID> : i
<ASSIGN_OPERATOR> : =
<ID> : i
<PLUS> : +
<INTEGERAL_LITERAL> : 1
<SEMICOLON> : ;
<LEFT_CURLY_B> : }
<LEFT_CURLY_B> : }
<RETURN> : return
<ID> : factorial
<SEMICOLON> : ;
<LEFT_CURLY_B> : }
