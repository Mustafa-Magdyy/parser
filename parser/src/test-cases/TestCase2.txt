<INT> : int
<ID> : fast_power
<RIGHT_ROUND_B> : (
<INT> : int
<ID> : base
<COMMA> : ,
<INT> : int
<ID> : power
<LEFT_ROUND_B> : )
<RIGHT_CURLY_B> : {
<IF> : if
<RIGHT_ROUND_B> : (
<ID> : power
<LESS_EQ> : <=
<INTEGERAL_LITERAL> : 0
<LEFT_ROUND_B> : )
<RIGHT_CURLY_B> : {
<RETURN> : return
<INTEGERAL_LITERAL> : 1
<SEMICOLON> : ;
<LEFT_CURLY_B> : }
<INT> : int
<ID> : ret
<SEMICOLON> : ;
<ID> : ret
<ASSIGN_OPERATOR> : =
<ID> : fast_power
<RIGHT_ROUND_B> : (
<ID> : base
<COMMA> : ,
<ID> : power
<DIVIDE> : /
<INTEGERAL_LITERAL> : 2
<LEFT_ROUND_B> : )
<SEMICOLON> : ;
<ID> : ret
<ASSIGN_OPERATOR> : =
<ID> : ret
<ASTERICK> : *
<ID> : ret
<SEMICOLON> : ;
<IF> : if
<RIGHT_ROUND_B> : (
<ID> : power
<MOD> : %
<INTEGERAL_LITERAL> : 2
<EQUAL> : ==
<INTEGERAL_LITERAL> : 1
<LEFT_ROUND_B> : )
<RIGHT_CURLY_B> : {
<ID> : ret
<ASSIGN_OPERATOR> : =
<ID> : ret
<ASTERICK> : *
<ID> : base
<SEMICOLON> : ;
<LEFT_CURLY_B> : }
<RETURN> : return
<ID> : ret
<SEMICOLON> : ;
<LEFT_CURLY_B> : }