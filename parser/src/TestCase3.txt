<VOID> : void
<ID> : hard_test
<RIGHT_ROUND_B> : (
<INT> : int
<ID> : a
<COMMA> : ,
<INT> : int
<ID> : b
<COMMA> : ,
<FLOAT> : float
<ID> : c
<COMMA> : ,
<BOOL> : bool
<ID> : d
<LEFT_ROUND_B> : )
<RIGHT_CURLY_B> : {
<IF> : if
<RIGHT_ROUND_B> : (
<ID> : a
<LESS_EQ> : <=
<INTEGERAL_LITERAL> : 0
<AND> : &&
<ID> : b
<GREATERTHAN> : >
<INTEGERAL_LITERAL> : 1
<OR> : ||
<ID> : c
<LESSTHAN> : <
<FLOAT_LITERAL> : 0.5
<AND> : &&
<ID> : d
<EQUAL> : ==
<TRUE> : true
<LEFT_ROUND_B> : )
<RIGHT_CURLY_B> : {
<RETURN> : return
<ID> : a
<ASTERICK> : *
<ID> : b
<DIVIDE> : /
<RIGHT_ROUND_B> : (
<ID> : c
<PLUS> : +
<ID> : d
<LEFT_ROUND_B> : )
<SEMICOLON> : ;
<LEFT_CURLY_B> : }
<INT> : int
<ID> : n
<SEMICOLON> : ;
<INT> : int
<ID> : i
<SEMICOLON> : ;
<FLOAT> : float
<ID> : arr
<RIGHT_SQUARE_B> : [
<LEFT_SQUARE_B> : ]
<SEMICOLON> : ;
<ID> : i
<ASSIGN_OPERATOR> : =
<INTEGERAL_LITERAL> : 1
<SEMICOLON> : ;
<ID> : n
<ASSIGN_OPERATOR> : =
<INTEGERAL_LITERAL> : 10
<SEMICOLON> : ;
<WHILE> : while
<RIGHT_ROUND_B> : (
<ID> : i
<LESSTHAN> : <
<ID> : n
<AND> : &&
<ID> : a
<OR> : ||
<NOT> : !
<ID> : d
<LEFT_ROUND_B> : )
<RIGHT_CURLY_B> : {
<ID> : arr
<RIGHT_SQUARE_B> : [
<ID> : i
<LEFT_SQUARE_B> : ]
<ASSIGN_OPERATOR> : =
<MINUS> : -
<ID> : arr
<RIGHT_SQUARE_B> : [
<ID> : i
<ASTERICK> : *
<INTEGERAL_LITERAL> : 2
<PLUS> : +
<ID> : i
<MOD> : %
<INTEGERAL_LITERAL> : 3
<LEFT_SQUARE_B> : ]
<SEMICOLON> : ;
<ID> : i
<ASSIGN_OPERATOR> : =
<ID> : i
<PLUS> : +
<INTEGERAL_LITERAL> : 1
<SEMICOLON> : ;
<LEFT_CURLY_B> : }
<RETURN> : return
<ID> : arr
<RIGHT_SQUARE_B> : [
<ID> : n
<DIVIDE> : /
<ID> : i
<LEFT_SQUARE_B> : ]
<PLUS> : +
<INTEGERAL_LITERAL> : 2
<SEMICOLON> : ;
<LEFT_CURLY_B> : }